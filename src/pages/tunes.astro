---
import Layout from '../layouts/Layout.astro';

const user = import.meta.env.LASTFM_USER;
const apiKey = import.meta.env.LASTFM_API_KEY;

const ignoreNames = ['the magnus archives', 'the yard'];

function getImage(images, preferredSize = 'medium') {
  if (!Array.isArray(images)) return null;
  // Try to find an image in the requested size first.
  let img = images.find((i) => i.size === preferredSize && i['#text']);
  if (img && img['#text']) return img['#text'];

  // Fallback to any available size with a valid url.
  img = images.find((i) => i['#text']);
  return img ? img['#text'] : null;
}

function isMusic(name) {
  const lower = (name || '').toLowerCase();
  return !ignoreNames.some((bad) => lower.includes(bad));
}

async function fetchLastFm(method, extraParams = {}) {
  const params = new URLSearchParams({
    method,
    user,
    api_key: apiKey,
    format: 'json',
    ...extraParams,
  });
  const url = `https://ws.audioscrobbler.com/2.0/?${params.toString()}`;
  const res = await fetch(url);
  if (!res.ok) {
    return null;
  }
  return await res.json();
}

async function fetchTrackInfo(track) {
  const params = new URLSearchParams({ api_key: apiKey, format: 'json' });
  if (track.mbid) {
    params.append('mbid', track.mbid);
  } else {
    params.append('artist', track.artist?.name || track.artist);
    params.append('track', track.name);
  }
  const url = `https://ws.audioscrobbler.com/2.0/?method=track.getInfo&${params.toString()}`;
  const res = await fetch(url);
  if (!res.ok) return null;
  return await res.json();
}

async function fetchArtistInfo(artist) {
  const params = new URLSearchParams({ api_key: apiKey, format: 'json' });
  if (artist.mbid) {
    params.append('mbid', artist.mbid);
  } else {
    params.append('artist', artist.name);
  }
  const url = `https://ws.audioscrobbler.com/2.0/?method=artist.getInfo&${params.toString()}`;
  const res = await fetch(url);
  if (!res.ok) return null;
  return await res.json();
}

const recentData = await fetchLastFm('user.getrecenttracks', { limit: 5 });
const topTracksData = await fetchLastFm('user.gettoptracks', { limit: 5 });
const topArtistsData = await fetchLastFm('user.gettopartists', { limit: 5 });

const recentTracks = (recentData?.recenttracks?.track ?? [])
  .filter((t) => isMusic(t.name) && isMusic(t?.artist?.['#text']));
const topTracks = (topTracksData?.toptracks?.track ?? [])
  .filter((t) => isMusic(t.name) && isMusic(t?.artist?.name));
const topArtists = (topArtistsData?.topartists?.artist ?? [])
  .filter((a) => isMusic(a.name));

for (const track of topTracks) {
  if (!getImage(track.image)) {
    const info = await fetchTrackInfo(track);
    const candidate = info?.track?.album?.image || info?.track?.artist?.image;
    if (candidate) {
      track.image = candidate;
    }
  }
}

for (const artist of topArtists) {
  if (!getImage(artist.image)) {
    const info = await fetchArtistInfo(artist);
    if (info?.artist?.image) {
      artist.image = info.artist.image;
    }
  }
}
---

<Layout title="Tunes">
  <h1 class="text-3xl font-bold my-6">Tunes</h1>
  <section class="mb-8">
    <h2 class="text-2xl font-semibold mb-4">Recent Tracks</h2>
    <ul class="space-y-2">
      {recentTracks.map(track => (
        <li class="border-b pb-2 flex items-center gap-4" key={track.mbid || track.url}>
          {getImage(track.image) && (
            <img src={getImage(track.image)} alt={`Art for ${track.name}`} class="w-12 h-12 object-cover rounded" loading="lazy" />
          )}
          <a href={track.url} class="hover:underline" target="_blank">
            {track.artist['#text']} – {track.name}
          </a>
        </li>
      ))}
    </ul>
  </section>

  <section class="mb-8">
    <h2 class="text-2xl font-semibold mb-4">Top Tracks</h2>
    <ol class="list-decimal pl-5 space-y-2">
      {topTracks.map((track, i) => (
        <li class="flex items-center gap-4" key={track.mbid || track.url}>
          {getImage(track.image) && (
            <img src={getImage(track.image)} alt={`Art for ${track.name}`} class="w-12 h-12 object-cover rounded" loading="lazy" />
          )}
          <a href={track.url} class="hover:underline" target="_blank">
            {track.artist.name} – {track.name}
          </a>
        </li>
      ))}
    </ol>
  </section>

  <section class="mb-8">
    <h2 class="text-2xl font-semibold mb-4">Top Artists</h2>
    <ol class="list-decimal pl-5 space-y-2">
      {topArtists.map((artist, i) => (
        <li class="flex items-center gap-4" key={artist.mbid || artist.url}>
          {getImage(artist.image) && (
            <img src={getImage(artist.image)} alt={`Photo of ${artist.name}`} class="w-12 h-12 object-cover rounded-full" loading="lazy" />
          )}
          <a href={artist.url} class="hover:underline" target="_blank">
            {artist.name}
          </a>
        </li>
      ))}
    </ol>
  </section>
</Layout>
