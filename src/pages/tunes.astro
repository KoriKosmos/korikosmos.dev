---
import Layout from '../layouts/Layout.astro';

const user = import.meta.env.LASTFM_USER;
const apiKey = import.meta.env.LASTFM_API_KEY;
---

<Layout title="Tunes">
  <h1 class="text-3xl font-bold my-6">Tunes</h1>
  <section class="mb-8">
    <h2 class="text-2xl font-semibold mb-4">Recent Tracks</h2>
    <div id="player" class="border rounded p-4 max-w-md mx-auto">
      <p>Loading...</p>
    </div>
  </section>

  <script define:vars={{ user, apiKey }} is:inline>
    const ignoreNames = ['the magnus archives', 'the yard', 'knifepoint horror'];

    function getImage(images, preferredSize = 'medium') {
      if (!Array.isArray(images)) return null;
      let img = images.find((i) => i.size === preferredSize && i['#text']);
      if (img && img['#text']) return img['#text'];
      img = images.find((i) => i['#text']);
      return img ? img['#text'] : null;
    }

    function isMusic(name) {
      const lower = (name || '').toLowerCase();
      return !ignoreNames.some((bad) => lower.includes(bad));
    }

    function normalize(name) {
      return (name || '')
        .toLowerCase()
        .replace(/[\u3000]/g, ' ')
        .replace(/\(.*?\)/g, '')
        .replace(/feat\.?[^-]*$/i, '')
        .replace(/\s+/g, ' ')
        .trim();
    }

    async function fetchLastFm() {
      const url = `https://ws.audioscrobbler.com/2.0/?method=user.getrecenttracks&user=${user}&api_key=${apiKey}&format=json`;
      const res = await fetch(url);
      if (!res.ok) return null;
      return await res.json();
    }

    function createTrackEl(track, first) {
      const div = document.createElement('div');
      div.className = `track ${first ? '' : 'hidden'}`;
      const imgSrc = getImage(track.image, 'extralarge');
      if (imgSrc) {
        const img = document.createElement('img');
        img.src = imgSrc;
        img.alt = `Art for ${track.name}`;
        img.loading = 'lazy';
        img.className = 'w-full h-64 object-cover rounded mb-4';
        div.appendChild(img);
      }
      const info = document.createElement('div');
      info.className = 'text-center';
      const name = document.createElement('p');
      name.className = 'font-semibold';
      name.textContent = track.name;
      const artist = document.createElement('p');
      artist.className = 'text-sm text-gray-500';
      artist.textContent = track.artist['#text'];
      info.appendChild(name);
      info.appendChild(artist);
      div.appendChild(info);
      return div;
    }

    async function loadTracks() {
      const data = await fetchLastFm();
      const container = document.getElementById('player');
      container.innerHTML = '';
      if (!data) {
        container.textContent = 'Failed to load tracks.';
        return;
      }
      const seen = new Set();
      const unique = [];
      for (const t of data.recenttracks.track || []) {
        if (!isMusic(t.name) || !isMusic(t?.artist?.['#text'])) continue;
        const key = t.mbid || normalize(t.name);
        if (!key || seen.has(key)) continue;
        seen.add(key);
        unique.push(t);
        if (unique.length >= 10) break;
      }
      if (!unique.length) {
        container.textContent = 'No recent tracks found.';
        return;
      }
      unique.forEach((track, i) => container.appendChild(createTrackEl(track, i === 0)));
      const controls = document.createElement('div');
      controls.className = 'flex justify-between mt-4 text-2xl';
      controls.innerHTML = '<button id="prev" class="px-3 py-1 border rounded" aria-label="Previous">\u23EE</button><button id="next" class="px-3 py-1 border rounded" aria-label="Next">\u23ED</button>';
      container.appendChild(controls);
      const tracks = Array.from(container.querySelectorAll('.track'));
      let current = 0;
      controls.querySelector('#prev').addEventListener('click', () => {
        tracks[current].classList.add('hidden');
        current = (current - 1 + tracks.length) % tracks.length;
        tracks[current].classList.remove('hidden');
      });
      controls.querySelector('#next').addEventListener('click', () => {
        tracks[current].classList.add('hidden');
        current = (current + 1) % tracks.length;
        tracks[current].classList.remove('hidden');
      });
    }

    loadTracks();
  </script>
</Layout>
