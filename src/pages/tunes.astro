---
import Layout from '../layouts/Layout.astro';

const user = import.meta.env.LASTFM_USER;
const apiKey = import.meta.env.LASTFM_API_KEY;

const ignoreNames = ['the magnus archives', 'the yard'];

function getImage(images, preferredSize = 'medium') {
  if (!Array.isArray(images)) return null;
  // Try to find an image in the requested size first.
  let img = images.find((i) => i.size === preferredSize && i['#text']);
  if (img && img['#text']) return img['#text'];

  // Fallback to any available size with a valid url.
  img = images.find((i) => i['#text']);
  return img ? img['#text'] : null;
}

function isMusic(name) {
  const lower = (name || '').toLowerCase();
  return !ignoreNames.some((bad) => lower.includes(bad));
}

async function fetchLastFm(method) {
  const url = `https://ws.audioscrobbler.com/2.0/?method=${method}&user=${user}&api_key=${apiKey}&format=json`;
  const res = await fetch(url);
  if (!res.ok) {
    return null;
  }
  return await res.json();
}

async function fetchTrackInfo(track) {
  const params = new URLSearchParams({ api_key: apiKey, format: 'json' });
  if (track.mbid) {
    params.append('mbid', track.mbid);
  } else {
    params.append('artist', track.artist?.name || track.artist);
    params.append('track', track.name);
  }
  const url = `https://ws.audioscrobbler.com/2.0/?method=track.getInfo&${params.toString()}`;
  const res = await fetch(url);
  if (!res.ok) return null;
  return await res.json();
}

async function fetchArtistInfo(artist) {
  const params = new URLSearchParams({ api_key: apiKey, format: 'json' });
  if (artist.mbid) {
    params.append('mbid', artist.mbid);
  } else {
    params.append('artist', artist.name);
  }
  const url = `https://ws.audioscrobbler.com/2.0/?method=artist.getInfo&${params.toString()}`;
  const res = await fetch(url);
  if (!res.ok) return null;
  return await res.json();
}

const recentData = await fetchLastFm('user.getrecenttracks');
// const topTracksData = await fetchLastFm('user.gettoptracks');
// const topArtistsData = await fetchLastFm('user.gettopartists');

const recentTracks = (recentData?.recenttracks?.track ?? [])
  .filter((t) => isMusic(t.name) && isMusic(t?.artist?.['#text']))
  .slice(0, 10);
// const topTracks = (topTracksData?.toptracks?.track ?? [])
//   .filter((t) => isMusic(t.name) && isMusic(t?.artist?.name))
//   .slice(0, 5);
// const topArtists = (topArtistsData?.topartists?.artist ?? [])
//   .filter((a) => isMusic(a.name))
//   .slice(0, 5);

// for (const track of topTracks) {
//   if (!getImage(track.image)) {
//     const info = await fetchTrackInfo(track);
//     const candidate = info?.track?.album?.image || info?.track?.artist?.image;
//     if (candidate) {
//       track.image = candidate;
//     }
//   }
// }

// for (const artist of topArtists) {
//   if (!getImage(artist.image)) {
//     const info = await fetchArtistInfo(artist);
//     if (info?.artist?.image) {
//       artist.image = info.artist.image;
//     }
//   }
// }
---

<Layout title="Tunes">
  <h1 class="text-3xl font-bold my-6">Tunes</h1>
  <section class="mb-8">
    <h2 class="text-2xl font-semibold mb-4">Recent Tracks</h2>
    <div id="player" class="border rounded p-4 max-w-md mx-auto">
      {recentTracks.map((track, i) => (
        <div class={`track ${i === 0 ? '' : 'hidden'}`} key={track.mbid || track.url}>
          {getImage(track.image, 'extralarge') && (
            <img src={getImage(track.image, 'extralarge')} alt={`Art for ${track.name}`} class="w-full h-64 object-cover rounded mb-4" loading="lazy" />
          )}
          <div class="text-center">
            <p class="font-semibold">{track.name}</p>
            <p class="text-sm text-gray-500">{track.artist['#text']}</p>
          </div>
        </div>
      ))}
      <div class="flex justify-between mt-4 text-2xl">
        <button id="prev" class="px-3 py-1 border rounded" aria-label="Previous">&#x23EE;</button>
        <button id="next" class="px-3 py-1 border rounded" aria-label="Next">&#x23ED;</button>
      </div>
    </div>
  </section>

  <script is:inline>
    const tracks = Array.from(document.querySelectorAll('#player .track'));
    let current = 0;
    document.getElementById('prev').addEventListener('click', () => {
      tracks[current].classList.add('hidden');
      current = (current - 1 + tracks.length) % tracks.length;
      tracks[current].classList.remove('hidden');
    });
    document.getElementById('next').addEventListener('click', () => {
      tracks[current].classList.add('hidden');
      current = (current + 1) % tracks.length;
      tracks[current].classList.remove('hidden');
    });
  </script>
</Layout>
